// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/RcppThread.h"
#include <Rcpp.h>

using namespace Rcpp;

// testMonitor
void testMonitor();
RcppExport SEXP _RcppThread_testMonitor() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    testMonitor();
    return R_NilValue;
END_RCPP
}
// testThreadClass
void testThreadClass();
RcppExport SEXP _RcppThread_testThreadClass() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    testThreadClass();
    return R_NilValue;
END_RCPP
}
// testThreadPoolPush
void testThreadPoolPush();
RcppExport SEXP _RcppThread_testThreadPoolPush() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    testThreadPoolPush();
    return R_NilValue;
END_RCPP
}
// testThreadPoolMap
void testThreadPoolMap();
RcppExport SEXP _RcppThread_testThreadPoolMap() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    testThreadPoolMap();
    return R_NilValue;
END_RCPP
}
// testThreadPoolParallelFor
void testThreadPoolParallelFor();
RcppExport SEXP _RcppThread_testThreadPoolParallelFor() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    testThreadPoolParallelFor();
    return R_NilValue;
END_RCPP
}
// testThreadPoolForEach
void testThreadPoolForEach();
RcppExport SEXP _RcppThread_testThreadPoolForEach() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    testThreadPoolForEach();
    return R_NilValue;
END_RCPP
}
// testThreadPoolSingleThreaded
void testThreadPoolSingleThreaded();
RcppExport SEXP _RcppThread_testThreadPoolSingleThreaded() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    testThreadPoolSingleThreaded();
    return R_NilValue;
END_RCPP
}
// testParallelFor
void testParallelFor();
RcppExport SEXP _RcppThread_testParallelFor() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    testParallelFor();
    return R_NilValue;
END_RCPP
}
// testForEach
void testForEach();
RcppExport SEXP _RcppThread_testForEach() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    testForEach();
    return R_NilValue;
END_RCPP
}
// testThreadInterrupt
void testThreadInterrupt();
RcppExport SEXP _RcppThread_testThreadInterrupt() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    testThreadInterrupt();
    return R_NilValue;
END_RCPP
}
// testPoolInterruptJoin
void testPoolInterruptJoin();
RcppExport SEXP _RcppThread_testPoolInterruptJoin() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    testPoolInterruptJoin();
    return R_NilValue;
END_RCPP
}
// testPoolInterruptWait
void testPoolInterruptWait();
RcppExport SEXP _RcppThread_testPoolInterruptWait() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    testPoolInterruptWait();
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppThread_testMonitor", (DL_FUNC) &_RcppThread_testMonitor, 0},
    {"_RcppThread_testThreadClass", (DL_FUNC) &_RcppThread_testThreadClass, 0},
    {"_RcppThread_testThreadPoolPush", (DL_FUNC) &_RcppThread_testThreadPoolPush, 0},
    {"_RcppThread_testThreadPoolMap", (DL_FUNC) &_RcppThread_testThreadPoolMap, 0},
    {"_RcppThread_testThreadPoolParallelFor", (DL_FUNC) &_RcppThread_testThreadPoolParallelFor, 0},
    {"_RcppThread_testThreadPoolForEach", (DL_FUNC) &_RcppThread_testThreadPoolForEach, 0},
    {"_RcppThread_testThreadPoolSingleThreaded", (DL_FUNC) &_RcppThread_testThreadPoolSingleThreaded, 0},
    {"_RcppThread_testParallelFor", (DL_FUNC) &_RcppThread_testParallelFor, 0},
    {"_RcppThread_testForEach", (DL_FUNC) &_RcppThread_testForEach, 0},
    {"_RcppThread_testThreadInterrupt", (DL_FUNC) &_RcppThread_testThreadInterrupt, 0},
    {"_RcppThread_testPoolInterruptJoin", (DL_FUNC) &_RcppThread_testPoolInterruptJoin, 0},
    {"_RcppThread_testPoolInterruptWait", (DL_FUNC) &_RcppThread_testPoolInterruptWait, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppThread(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
