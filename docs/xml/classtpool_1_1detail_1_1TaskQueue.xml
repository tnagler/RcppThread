<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classquickpool_1_1detail_1_1TaskQueue" kind="class" language="C++" prot="public">
    <compoundname>quickpool::detail::TaskQueue</compoundname>
    <includes local="no">quickpool.hpp</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classquickpool_1_1detail_1_1TaskQueue_1af37d88465f83bf554a4b6caa3dd9875b" prot="private" static="no">
        <type>std::function&lt; void()&gt;</type>
        <definition>using quickpool::detail::TaskQueue::Task =  std::function&lt;void()&gt;</definition>
        <argsstring></argsstring>
        <name>Task</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" line="154" column="5" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" bodystart="154" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classquickpool_1_1detail_1_1TaskQueue_1a35a9dbcefa8685ed2de73b3cce23100c" prot="private" static="no" mutable="no">
        <type>std::atomic_int</type>
        <definition>std::atomic_int quickpool::detail::TaskQueue::top_</definition>
        <argsstring></argsstring>
        <name>top_</name>
        <initializer>{ 0 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" line="281" column="29" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" bodystart="281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classquickpool_1_1detail_1_1TaskQueue_1a57e8fa099c6875c0add4b87d48a5c34f" prot="private" static="no" mutable="no">
        <type>std::atomic_int</type>
        <definition>std::atomic_int quickpool::detail::TaskQueue::bottom_</definition>
        <argsstring></argsstring>
        <name>bottom_</name>
        <initializer>{ 0 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" line="282" column="29" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" bodystart="282" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classquickpool_1_1detail_1_1TaskQueue_1a9c7c938df1e2802aaedf9fedbe3cf5ec" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; <ref refid="classquickpool_1_1detail_1_1RingBuffer" kindref="compound">RingBuffer</ref>&lt; Task * &gt; * &gt;</type>
        <definition>std::atomic&lt;RingBuffer&lt;Task*&gt;*&gt; quickpool::detail::TaskQueue::buffer_</definition>
        <argsstring></argsstring>
        <name>buffer_</name>
        <initializer>{ nullptr }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" line="283" column="25" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" bodystart="283" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classquickpool_1_1detail_1_1TaskQueue_1a953041cbedd5e9f47dff44d12a8afb22" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::unique_ptr&lt; <ref refid="classquickpool_1_1detail_1_1RingBuffer" kindref="compound">RingBuffer</ref>&lt; Task * &gt; &gt; &gt;</type>
        <definition>std::vector&lt;std::unique_ptr&lt;RingBuffer&lt;Task*&gt; &gt; &gt; quickpool::detail::TaskQueue::old_buffers_</definition>
        <argsstring></argsstring>
        <name>old_buffers_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" line="284" column="17" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" bodystart="284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classquickpool_1_1detail_1_1TaskQueue_1afe14b01d11aaa8f88f2166f37c16b8e0" prot="private" static="no" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex quickpool::detail::TaskQueue::mutex_</definition>
        <argsstring></argsstring>
        <name>mutex_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" line="285" column="16" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classquickpool_1_1detail_1_1TaskQueue_1aa336f4978ab3b3b581c4347720283b84" prot="private" static="no" mutable="no">
        <type>std::condition_variable</type>
        <definition>std::condition_variable quickpool::detail::TaskQueue::cv_</definition>
        <argsstring></argsstring>
        <name>cv_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" line="286" column="29" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" bodystart="286" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classquickpool_1_1detail_1_1TaskQueue_1a1206bf5389aa9841efd5e9572c3718c2" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; bool &gt;</type>
        <definition>std::atomic&lt;bool&gt; quickpool::detail::TaskQueue::stopped_</definition>
        <argsstring></argsstring>
        <name>stopped_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" line="287" column="17" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" bodystart="287" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classquickpool_1_1detail_1_1TaskQueue_1a14ee8681c08c8a110e32a1b6bf38dd12" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr std::memory_order</type>
        <definition>constexpr std::memory_order quickpool::detail::TaskQueue::m_relaxed</definition>
        <argsstring></argsstring>
        <name>m_relaxed</name>
        <initializer>= std::memory_order_relaxed</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" line="290" column="40" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" bodystart="290" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classquickpool_1_1detail_1_1TaskQueue_1a705a36b86989cb8fb0e0fcf3554ed248" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr std::memory_order</type>
        <definition>constexpr std::memory_order quickpool::detail::TaskQueue::m_acquire</definition>
        <argsstring></argsstring>
        <name>m_acquire</name>
        <initializer>= std::memory_order_acquire</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" line="291" column="40" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" bodystart="291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classquickpool_1_1detail_1_1TaskQueue_1aa427632588a6b3244e87070c41107f2f" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr std::memory_order</type>
        <definition>constexpr std::memory_order quickpool::detail::TaskQueue::m_release</definition>
        <argsstring></argsstring>
        <name>m_release</name>
        <initializer>= std::memory_order_release</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" line="292" column="40" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" bodystart="292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classquickpool_1_1detail_1_1TaskQueue_1a705c7aaa272866517e53bb686e7c2881" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr std::memory_order</type>
        <definition>constexpr std::memory_order quickpool::detail::TaskQueue::m_seq_cst</definition>
        <argsstring></argsstring>
        <name>m_seq_cst</name>
        <initializer>= std::memory_order_seq_cst</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" line="293" column="40" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" bodystart="293" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classquickpool_1_1detail_1_1TaskQueue_1abbd85064617d492ed77bf223d5d5b5c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>quickpool::detail::TaskQueue::TaskQueue</definition>
        <argsstring>(size_t capacity=256)</argsstring>
        <name>TaskQueue</name>
        <param>
          <type>size_t</type>
          <declname>capacity</declname>
          <defval>256</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>constructs the queue with a given capacity. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a power of two. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" line="159" column="5" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" bodystart="159" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classquickpool_1_1detail_1_1TaskQueue_1a5d3ea0af28235c7550782a2b91ccbbc9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>quickpool::detail::TaskQueue::~TaskQueue</definition>
        <argsstring>() noexcept</argsstring>
        <name>~TaskQueue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" line="163" column="5" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" bodystart="163" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classquickpool_1_1detail_1_1TaskQueue_1a6100dc7e5a8075074eb58e376125be62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>quickpool::detail::TaskQueue::TaskQueue</definition>
        <argsstring>(TaskQueue const &amp;other)=delete</argsstring>
        <name>TaskQueue</name>
        <param>
          <type><ref refid="classquickpool_1_1detail_1_1TaskQueue" kindref="compound">TaskQueue</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" line="172" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classquickpool_1_1detail_1_1TaskQueue_1a8b4fb55553e2d22bb81f32dc5599de44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquickpool_1_1detail_1_1TaskQueue" kindref="compound">TaskQueue</ref> &amp;</type>
        <definition>TaskQueue&amp; quickpool::detail::TaskQueue::operator=</definition>
        <argsstring>(TaskQueue const &amp;other)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classquickpool_1_1detail_1_1TaskQueue" kindref="compound">TaskQueue</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" line="173" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classquickpool_1_1detail_1_1TaskQueue_1a7af3d5cd6055b204f3aefcaa1558272e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool quickpool::detail::TaskQueue::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <briefdescription>
<para>checks if queue is empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" line="176" column="10" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" bodystart="176" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classquickpool_1_1detail_1_1TaskQueue_1ad091fd6afea409913c396ec251c528b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void quickpool::detail::TaskQueue::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>clears the queue. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" line="182" column="10" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" bodystart="182" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classquickpool_1_1detail_1_1TaskQueue_1ab8fd0ab537ce800f9388f1fe0016acf7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool quickpool::detail::TaskQueue::try_push</definition>
        <argsstring>(Task &amp;&amp;task)</argsstring>
        <name>try_push</name>
        <param>
          <type>Task &amp;&amp;</type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>pushes a task to the bottom of the queue; returns false if queue is currently locked; enlarges the queue if full. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" line="201" column="10" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" bodystart="201" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classquickpool_1_1detail_1_1TaskQueue_1a9bb940b4d9e27dc037f5e9f6c249fa59" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void quickpool::detail::TaskQueue::force_push</definition>
        <argsstring>(Task &amp;&amp;task)</argsstring>
        <name>force_push</name>
        <param>
          <type>Task &amp;&amp;</type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>pushes a task to the bottom of the queue; enlarges the queue if full. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" line="216" column="10" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" bodystart="216" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="classquickpool_1_1detail_1_1TaskQueue_1a1c1e785ad586d8d32478396decc9a2a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void quickpool::detail::TaskQueue::push_unsafe</definition>
        <argsstring>(Task &amp;&amp;task)</argsstring>
        <name>push_unsafe</name>
        <param>
          <type>Task &amp;&amp;</type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>pushes a task without locking the queue (enough for single producer) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" line="227" column="10" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" bodystart="227" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="classquickpool_1_1detail_1_1TaskQueue_1a4b5d1adff3c55d6cc0ed4bf5fb008935" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool quickpool::detail::TaskQueue::try_pop</definition>
        <argsstring>(Task &amp;task)</argsstring>
        <name>try_pop</name>
        <param>
          <type>Task &amp;</type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>pops a task from the top of the queue; returns false if lost race. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" line="245" column="10" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" bodystart="245" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="classquickpool_1_1detail_1_1TaskQueue_1aad71c45189121bcb9a8776021481178c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void quickpool::detail::TaskQueue::wait</definition>
        <argsstring>()</argsstring>
        <name>wait</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" line="265" column="10" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" bodystart="265" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="classquickpool_1_1detail_1_1TaskQueue_1afbd86bd79218c93405e3d0c3bb0e37bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void quickpool::detail::TaskQueue::stop</definition>
        <argsstring>()</argsstring>
        <name>stop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" line="271" column="10" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" bodystart="271" bodyend="278"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A multi-producer, multi-consumer queue; pops are lock free. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" line="153" column="1" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/quickpool.hpp" bodystart="152" bodyend="294"/>
    <listofallmembers>
      <member refid="classquickpool_1_1detail_1_1TaskQueue_1a57e8fa099c6875c0add4b87d48a5c34f" prot="private" virt="non-virtual"><scope>quickpool::detail::TaskQueue</scope><name>bottom_</name></member>
      <member refid="classquickpool_1_1detail_1_1TaskQueue_1a9c7c938df1e2802aaedf9fedbe3cf5ec" prot="private" virt="non-virtual"><scope>quickpool::detail::TaskQueue</scope><name>buffer_</name></member>
      <member refid="classquickpool_1_1detail_1_1TaskQueue_1ad091fd6afea409913c396ec251c528b8" prot="public" virt="non-virtual"><scope>quickpool::detail::TaskQueue</scope><name>clear</name></member>
      <member refid="classquickpool_1_1detail_1_1TaskQueue_1aa336f4978ab3b3b581c4347720283b84" prot="private" virt="non-virtual"><scope>quickpool::detail::TaskQueue</scope><name>cv_</name></member>
      <member refid="classquickpool_1_1detail_1_1TaskQueue_1a7af3d5cd6055b204f3aefcaa1558272e" prot="public" virt="non-virtual"><scope>quickpool::detail::TaskQueue</scope><name>empty</name></member>
      <member refid="classquickpool_1_1detail_1_1TaskQueue_1a9bb940b4d9e27dc037f5e9f6c249fa59" prot="public" virt="non-virtual"><scope>quickpool::detail::TaskQueue</scope><name>force_push</name></member>
      <member refid="classquickpool_1_1detail_1_1TaskQueue_1a705a36b86989cb8fb0e0fcf3554ed248" prot="private" virt="non-virtual"><scope>quickpool::detail::TaskQueue</scope><name>m_acquire</name></member>
      <member refid="classquickpool_1_1detail_1_1TaskQueue_1a14ee8681c08c8a110e32a1b6bf38dd12" prot="private" virt="non-virtual"><scope>quickpool::detail::TaskQueue</scope><name>m_relaxed</name></member>
      <member refid="classquickpool_1_1detail_1_1TaskQueue_1aa427632588a6b3244e87070c41107f2f" prot="private" virt="non-virtual"><scope>quickpool::detail::TaskQueue</scope><name>m_release</name></member>
      <member refid="classquickpool_1_1detail_1_1TaskQueue_1a705c7aaa272866517e53bb686e7c2881" prot="private" virt="non-virtual"><scope>quickpool::detail::TaskQueue</scope><name>m_seq_cst</name></member>
      <member refid="classquickpool_1_1detail_1_1TaskQueue_1afe14b01d11aaa8f88f2166f37c16b8e0" prot="private" virt="non-virtual"><scope>quickpool::detail::TaskQueue</scope><name>mutex_</name></member>
      <member refid="classquickpool_1_1detail_1_1TaskQueue_1a953041cbedd5e9f47dff44d12a8afb22" prot="private" virt="non-virtual"><scope>quickpool::detail::TaskQueue</scope><name>old_buffers_</name></member>
      <member refid="classquickpool_1_1detail_1_1TaskQueue_1a8b4fb55553e2d22bb81f32dc5599de44" prot="public" virt="non-virtual"><scope>quickpool::detail::TaskQueue</scope><name>operator=</name></member>
      <member refid="classquickpool_1_1detail_1_1TaskQueue_1a1c1e785ad586d8d32478396decc9a2a7" prot="public" virt="non-virtual"><scope>quickpool::detail::TaskQueue</scope><name>push_unsafe</name></member>
      <member refid="classquickpool_1_1detail_1_1TaskQueue_1afbd86bd79218c93405e3d0c3bb0e37bc" prot="public" virt="non-virtual"><scope>quickpool::detail::TaskQueue</scope><name>stop</name></member>
      <member refid="classquickpool_1_1detail_1_1TaskQueue_1a1206bf5389aa9841efd5e9572c3718c2" prot="private" virt="non-virtual"><scope>quickpool::detail::TaskQueue</scope><name>stopped_</name></member>
      <member refid="classquickpool_1_1detail_1_1TaskQueue_1af37d88465f83bf554a4b6caa3dd9875b" prot="private" virt="non-virtual"><scope>quickpool::detail::TaskQueue</scope><name>Task</name></member>
      <member refid="classquickpool_1_1detail_1_1TaskQueue_1abbd85064617d492ed77bf223d5d5b5c0" prot="public" virt="non-virtual"><scope>quickpool::detail::TaskQueue</scope><name>TaskQueue</name></member>
      <member refid="classquickpool_1_1detail_1_1TaskQueue_1a6100dc7e5a8075074eb58e376125be62" prot="public" virt="non-virtual"><scope>quickpool::detail::TaskQueue</scope><name>TaskQueue</name></member>
      <member refid="classquickpool_1_1detail_1_1TaskQueue_1a35a9dbcefa8685ed2de73b3cce23100c" prot="private" virt="non-virtual"><scope>quickpool::detail::TaskQueue</scope><name>top_</name></member>
      <member refid="classquickpool_1_1detail_1_1TaskQueue_1a4b5d1adff3c55d6cc0ed4bf5fb008935" prot="public" virt="non-virtual"><scope>quickpool::detail::TaskQueue</scope><name>try_pop</name></member>
      <member refid="classquickpool_1_1detail_1_1TaskQueue_1ab8fd0ab537ce800f9388f1fe0016acf7" prot="public" virt="non-virtual"><scope>quickpool::detail::TaskQueue</scope><name>try_push</name></member>
      <member refid="classquickpool_1_1detail_1_1TaskQueue_1aad71c45189121bcb9a8776021481178c" prot="public" virt="non-virtual"><scope>quickpool::detail::TaskQueue</scope><name>wait</name></member>
      <member refid="classquickpool_1_1detail_1_1TaskQueue_1a5d3ea0af28235c7550782a2b91ccbbc9" prot="public" virt="non-virtual"><scope>quickpool::detail::TaskQueue</scope><name>~TaskQueue</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
