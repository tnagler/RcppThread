<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classRcppThread_1_1ThreadPool" kind="class" language="C++" prot="public">
    <compoundname>RcppThread::ThreadPool</compoundname>
    <includes local="no">ThreadPool.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classRcppThread_1_1ThreadPool_1a4be4ca7cc2abaab9471590013702f421" prot="private" static="no" mutable="no">
        <type>const size_t</type>
        <definition>const size_t RcppThread::ThreadPool::nWorkers_</definition>
        <argsstring></argsstring>
        <name>nWorkers_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/ThreadPool.hpp" line="73" column="18" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/ThreadPool.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classRcppThread_1_1ThreadPool_1a55d6e5030c0839bafdf5c5e9e8e3c337" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::thread &gt;</type>
        <definition>std::vector&lt;std::thread&gt; RcppThread::ThreadPool::workers_</definition>
        <argsstring></argsstring>
        <name>workers_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/ThreadPool.hpp" line="74" column="17" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/ThreadPool.hpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classRcppThread_1_1ThreadPool_1aae4f7bfd6bc3146587d3d43f8a215385" prot="private" static="no" mutable="no">
        <type>quickpool::detail::TaskManager</type>
        <definition>quickpool::detail::TaskManager RcppThread::ThreadPool::taskManager_</definition>
        <argsstring></argsstring>
        <name>taskManager_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/ThreadPool.hpp" line="75" column="36" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/ThreadPool.hpp" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classRcppThread_1_1ThreadPool_1afe2c7e90bfcd2d1e90c32827fa4ad29f" prot="private" static="no" mutable="no">
        <type>quickpool::TodoList</type>
        <definition>quickpool::TodoList RcppThread::ThreadPool::todoList_</definition>
        <argsstring></argsstring>
        <name>todoList_</name>
        <initializer>{ 0 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/ThreadPool.hpp" line="76" column="25" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/ThreadPool.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classRcppThread_1_1ThreadPool_1a58213270150f29c50adbb70c3d717c29" prot="private" static="no" mutable="no">
        <type>std::thread::id</type>
        <definition>std::thread::id RcppThread::ThreadPool::ctor_id_</definition>
        <argsstring></argsstring>
        <name>ctor_id_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/ThreadPool.hpp" line="78" column="21" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/ThreadPool.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classRcppThread_1_1ThreadPool_1a83ffe33d4d776b62baf312a1c4965c08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>RcppThread::ThreadPool::ThreadPool</definition>
        <argsstring>(ThreadPool &amp;&amp;)=delete</argsstring>
        <name>ThreadPool</name>
        <param>
          <type><ref refid="classRcppThread_1_1ThreadPool" kindref="compound">ThreadPool</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/ThreadPool.hpp" line="29" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classRcppThread_1_1ThreadPool_1a524ee4a9d217cba6cbdfd3405515376b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>RcppThread::ThreadPool::ThreadPool</definition>
        <argsstring>(const ThreadPool &amp;)=delete</argsstring>
        <name>ThreadPool</name>
        <param>
          <type>const <ref refid="classRcppThread_1_1ThreadPool" kindref="compound">ThreadPool</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/ThreadPool.hpp" line="30" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classRcppThread_1_1ThreadPool_1a66eb5407d41494582e7c456834e027b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>RcppThread::ThreadPool::ThreadPool</definition>
        <argsstring>()</argsstring>
        <name>ThreadPool</name>
        <briefdescription>
<para>constructs a thread pool with as many workers as there are cores. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/ThreadPool.hpp" line="31" column="5" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/ThreadPool.hpp" bodystart="82" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classRcppThread_1_1ThreadPool_1af12763cf29f5d75331a7dafb3bae1750" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>RcppThread::ThreadPool::ThreadPool</definition>
        <argsstring>(size_t nWorkers)</argsstring>
        <name>ThreadPool</name>
        <param>
          <type>size_t</type>
          <declname>nWorkers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>constructs a thread pool with <computeroutput>nWorkers</computeroutput> threads. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nWorkers</parametername>
</parameternamelist>
<parameterdescription>
<para>number of worker threads to create; if <computeroutput>nWorkers = 0</computeroutput>, all work pushed to the pool will be done in the main thread. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/ThreadPool.hpp" line="32" column="14" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/ThreadPool.hpp" bodystart="89" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classRcppThread_1_1ThreadPool_1aca522b3487e549852bbf73a41c4ed7cd" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>RcppThread::ThreadPool::~ThreadPool</definition>
        <argsstring>() noexcept</argsstring>
        <name>~ThreadPool</name>
        <briefdescription>
<para>destructor joins all threads if possible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/ThreadPool.hpp" line="34" column="5" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/ThreadPool.hpp" bodystart="117" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classRcppThread_1_1ThreadPool_1a4cda48aa1b12efd9e84302f2e3f463a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classRcppThread_1_1ThreadPool" kindref="compound">ThreadPool</ref> &amp;</type>
        <definition>ThreadPool&amp; RcppThread::ThreadPool::operator=</definition>
        <argsstring>(const ThreadPool &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classRcppThread_1_1ThreadPool" kindref="compound">ThreadPool</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/ThreadPool.hpp" line="36" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classRcppThread_1_1ThreadPool_1a6f3c66741b4c18ab9c096ec0f04da289" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classRcppThread_1_1ThreadPool" kindref="compound">ThreadPool</ref> &amp;</type>
        <definition>ThreadPool&amp; RcppThread::ThreadPool::operator=</definition>
        <argsstring>(ThreadPool &amp;&amp;other)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classRcppThread_1_1ThreadPool" kindref="compound">ThreadPool</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/ThreadPool.hpp" line="37" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classRcppThread_1_1ThreadPool_1af1c8048954f42b41d19bd8fa9133490a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void RcppThread::ThreadPool::push</definition>
        <argsstring>(F &amp;&amp;f, Args &amp;&amp;... args)</argsstring>
        <name>push</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>pushes jobs to the thread pool. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a function taking an arbitrary number of arguments. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>a comma-seperated list of the other arguments that shall be passed to <computeroutput>f</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The function returns void; if a job returns a result, use <computeroutput>pushReturn()</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/ThreadPool.hpp" line="54" column="10" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/ThreadPool.hpp" bodystart="136" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classRcppThread_1_1ThreadPool_1a14e16052783d48a17791b3f29d5149f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto RcppThread::ThreadPool::pushReturn</definition>
        <argsstring>(F &amp;&amp;f, Args &amp;&amp;... args) -&gt; std::future&lt; decltype(f(args...))&gt;</argsstring>
        <name>pushReturn</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>pushes jobs returning a value to the thread pool. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a function taking an arbitrary number of arguments. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>a comma-seperated list of the other arguments that shall be passed to <computeroutput>f</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an <computeroutput>std::shared_future</computeroutput>, where the user can get the result and rethrow the catched exceptions. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/ThreadPool.hpp" line="57" column="10" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/ThreadPool.hpp" bodystart="156" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classRcppThread_1_1ThreadPool_1ac0f94dddc58d21857245ae5010b9d491" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void RcppThread::ThreadPool::map</definition>
        <argsstring>(F &amp;&amp;f, I &amp;&amp;items)</argsstring>
        <name>map</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>I &amp;&amp;</type>
          <declname>items</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>maps a function on a list of items, possibly running tasks in parallel. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>function to be mapped. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>items</parametername>
</parameternamelist>
<parameterdescription>
<para>an objects containing the items on which <computeroutput>f</computeroutput> shall be mapped; must allow for <computeroutput>auto</computeroutput> loops (i.e., <computeroutput>std::begin(I)</computeroutput>/ <computeroutput>std::end(I)</computeroutput> must be defined). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/ThreadPool.hpp" line="60" column="10" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/ThreadPool.hpp" bodystart="173" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="classRcppThread_1_1ThreadPool_1ac3f2a25288cfbfcc62e885b7fb72fe73" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void RcppThread::ThreadPool::parallelFor</definition>
        <argsstring>(int begin, size_t end, F &amp;&amp;f, size_t nBatches=0)</argsstring>
        <name>parallelFor</name>
        <param>
          <type>int</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>end</declname>
          <defname>size</defname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nBatches</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>computes an index-based for loop in parallel batches. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>first index of the loop. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>the loop runs in the range <computeroutput>[begin, begin + size)</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>an object callable as a function (the &apos;loop body&apos;); typically a lambda. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nBatches</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of batches to create; the default (0) triggers a heuristic to automatically determine the batch size.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Consider the following code: <programlisting><codeline><highlight class="normal">std::vector&lt;double&gt;<sp/>x(10);</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>x.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>i;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>The parallel equivalent is given by: <programlisting><codeline><highlight class="normal">ThreadPool<sp/>pool(2);</highlight></codeline>
<codeline><highlight class="normal">pool.forIndex(0,<sp/>10,<sp/>[&amp;]<sp/>(size_t<sp/>i)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>i;</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
</programlisting></para>
<para><bold>Caution</bold>: if the iterations are not independent from another, the tasks need to be synchronized manually (e.g., using mutexes). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/ThreadPool.hpp" line="63" column="17" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/ThreadPool.hpp" bodystart="207" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classRcppThread_1_1ThreadPool_1a44b177dbf1297cb38019eee3343b2319" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void RcppThread::ThreadPool::parallelForEach</definition>
        <argsstring>(I &amp;items, F &amp;&amp;f, size_t nBatches=0)</argsstring>
        <name>parallelForEach</name>
        <param>
          <type>I &amp;</type>
          <declname>items</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nBatches</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>computes a for-each loop in parallel batches. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>items</parametername>
</parameternamelist>
<parameterdescription>
<para>an object allowing for <computeroutput>std::begin()</computeroutput>/<computeroutput>std::end()</computeroutput> and whose elements can be accessed by the <computeroutput>[]</computeroutput> operator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a function (the &apos;loop body&apos;). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nBatches</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of batches to create; the default (0) triggers a heuristic to automatically determine the number of batches.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Consider the following code: <programlisting><codeline><highlight class="normal">std::vector&lt;double&gt;<sp/>x(10,<sp/>1.0);</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(auto&amp;<sp/>xx<sp/>:<sp/>x)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>xx<sp/>*=<sp/>2;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>The parallel <computeroutput>ThreadPool</computeroutput> equivalent is <programlisting><codeline><highlight class="normal">ThreadPool<sp/>pool(2);</highlight></codeline>
<codeline><highlight class="normal">pool.parallelForEach(x,<sp/>[&amp;]<sp/>(double&amp;<sp/>xx)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>xx<sp/>*=<sp/>2;</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
</programlisting></para>
<para><bold>Caution</bold>: if the iterations are not independent from another, the tasks need to be synchronized manually (e.g., using mutexes). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/ThreadPool.hpp" line="66" column="17" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/ThreadPool.hpp" bodystart="247" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classRcppThread_1_1ThreadPool_1a6c93f9e84fadfdc1a3357770d47a738a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void RcppThread::ThreadPool::wait</definition>
        <argsstring>()</argsstring>
        <name>wait</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>waits for all jobs to finish and checks for interruptions, but only from the thread that created the pool.Does nothing when called from other threads. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/ThreadPool.hpp" line="68" column="10" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/ThreadPool.hpp" bodystart="255" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classRcppThread_1_1ThreadPool_1a1ba95e4fe30c81e19c7980c865a8ce86" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void RcppThread::ThreadPool::join</definition>
        <argsstring>()</argsstring>
        <name>join</name>
        <briefdescription>
<para>waits for all jobs to finish and joins all threads. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/ThreadPool.hpp" line="69" column="10" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/ThreadPool.hpp" bodystart="272" bodyend="280"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classRcppThread_1_1ThreadPool_1a17e23c155801f91d2e3434a95e2cef84" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classRcppThread_1_1ThreadPool" kindref="compound">ThreadPool</ref> &amp;</type>
        <definition>static ThreadPool&amp; RcppThread::ThreadPool::globalInstance</definition>
        <argsstring>()</argsstring>
        <name>globalInstance</name>
        <briefdescription>
<para>Access to the global thread pool instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/dev/r/RcppThread/inst/include/RcppThread/ThreadPool.hpp" line="40" column="23" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/ThreadPool.hpp" bodystart="40" bodyend="51"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Implemenation of the thread pool pattern based on <computeroutput>Thread</computeroutput>. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/data/dev/r/RcppThread/inst/include/RcppThread/ThreadPool.hpp" line="27" column="1" bodyfile="/data/dev/r/RcppThread/inst/include/RcppThread/ThreadPool.hpp" bodystart="26" bodyend="79"/>
    <listofallmembers>
      <member refid="classRcppThread_1_1ThreadPool_1a58213270150f29c50adbb70c3d717c29" prot="private" virt="non-virtual"><scope>RcppThread::ThreadPool</scope><name>ctor_id_</name></member>
      <member refid="classRcppThread_1_1ThreadPool_1a17e23c155801f91d2e3434a95e2cef84" prot="public" virt="non-virtual"><scope>RcppThread::ThreadPool</scope><name>globalInstance</name></member>
      <member refid="classRcppThread_1_1ThreadPool_1a1ba95e4fe30c81e19c7980c865a8ce86" prot="public" virt="non-virtual"><scope>RcppThread::ThreadPool</scope><name>join</name></member>
      <member refid="classRcppThread_1_1ThreadPool_1ac0f94dddc58d21857245ae5010b9d491" prot="public" virt="non-virtual"><scope>RcppThread::ThreadPool</scope><name>map</name></member>
      <member refid="classRcppThread_1_1ThreadPool_1a4be4ca7cc2abaab9471590013702f421" prot="private" virt="non-virtual"><scope>RcppThread::ThreadPool</scope><name>nWorkers_</name></member>
      <member refid="classRcppThread_1_1ThreadPool_1a4cda48aa1b12efd9e84302f2e3f463a7" prot="public" virt="non-virtual"><scope>RcppThread::ThreadPool</scope><name>operator=</name></member>
      <member refid="classRcppThread_1_1ThreadPool_1a6f3c66741b4c18ab9c096ec0f04da289" prot="public" virt="non-virtual"><scope>RcppThread::ThreadPool</scope><name>operator=</name></member>
      <member refid="classRcppThread_1_1ThreadPool_1ac3f2a25288cfbfcc62e885b7fb72fe73" prot="public" virt="non-virtual"><scope>RcppThread::ThreadPool</scope><name>parallelFor</name></member>
      <member refid="classRcppThread_1_1ThreadPool_1a44b177dbf1297cb38019eee3343b2319" prot="public" virt="non-virtual"><scope>RcppThread::ThreadPool</scope><name>parallelForEach</name></member>
      <member refid="classRcppThread_1_1ThreadPool_1af1c8048954f42b41d19bd8fa9133490a" prot="public" virt="non-virtual"><scope>RcppThread::ThreadPool</scope><name>push</name></member>
      <member refid="classRcppThread_1_1ThreadPool_1a14e16052783d48a17791b3f29d5149f0" prot="public" virt="non-virtual"><scope>RcppThread::ThreadPool</scope><name>pushReturn</name></member>
      <member refid="classRcppThread_1_1ThreadPool_1aae4f7bfd6bc3146587d3d43f8a215385" prot="private" virt="non-virtual"><scope>RcppThread::ThreadPool</scope><name>taskManager_</name></member>
      <member refid="classRcppThread_1_1ThreadPool_1a83ffe33d4d776b62baf312a1c4965c08" prot="public" virt="non-virtual"><scope>RcppThread::ThreadPool</scope><name>ThreadPool</name></member>
      <member refid="classRcppThread_1_1ThreadPool_1a524ee4a9d217cba6cbdfd3405515376b" prot="public" virt="non-virtual"><scope>RcppThread::ThreadPool</scope><name>ThreadPool</name></member>
      <member refid="classRcppThread_1_1ThreadPool_1a66eb5407d41494582e7c456834e027b8" prot="public" virt="non-virtual"><scope>RcppThread::ThreadPool</scope><name>ThreadPool</name></member>
      <member refid="classRcppThread_1_1ThreadPool_1af12763cf29f5d75331a7dafb3bae1750" prot="public" virt="non-virtual"><scope>RcppThread::ThreadPool</scope><name>ThreadPool</name></member>
      <member refid="classRcppThread_1_1ThreadPool_1afe2c7e90bfcd2d1e90c32827fa4ad29f" prot="private" virt="non-virtual"><scope>RcppThread::ThreadPool</scope><name>todoList_</name></member>
      <member refid="classRcppThread_1_1ThreadPool_1a6c93f9e84fadfdc1a3357770d47a738a" prot="public" virt="non-virtual"><scope>RcppThread::ThreadPool</scope><name>wait</name></member>
      <member refid="classRcppThread_1_1ThreadPool_1a55d6e5030c0839bafdf5c5e9e8e3c337" prot="private" virt="non-virtual"><scope>RcppThread::ThreadPool</scope><name>workers_</name></member>
      <member refid="classRcppThread_1_1ThreadPool_1aca522b3487e549852bbf73a41c4ed7cd" prot="public" virt="non-virtual"><scope>RcppThread::ThreadPool</scope><name>~ThreadPool</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
