<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespaceRcppThread" kind="namespace" language="C++">
    <compoundname>RcppThread</compoundname>
    <innerclass refid="classRcppThread_1_1ProgressPrinter" prot="public">RcppThread::ProgressPrinter</innerclass>
    <innerclass refid="classRcppThread_1_1ProgressCounter" prot="public">RcppThread::ProgressCounter</innerclass>
    <innerclass refid="classRcppThread_1_1ProgressBar" prot="public">RcppThread::ProgressBar</innerclass>
    <innerclass refid="classRcppThread_1_1RErrPrinter" prot="public">RcppThread::RErrPrinter</innerclass>
    <innerclass refid="classRcppThread_1_1RPrinter" prot="public">RcppThread::RPrinter</innerclass>
    <innerclass refid="classRcppThread_1_1UserInterruptException" prot="public">RcppThread::UserInterruptException</innerclass>
    <innerclass refid="classRcppThread_1_1RMonitor" prot="public">RcppThread::RMonitor</innerclass>
    <innerclass refid="classRcppThread_1_1Thread" prot="public">RcppThread::Thread</innerclass>
    <innerclass refid="classRcppThread_1_1ThreadPool" prot="public">RcppThread::ThreadPool</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceRcppThread_1a8393ba347760237abf9d823000af775e" prot="public" static="yes" mutable="no">
        <type><ref refid="classRcppThread_1_1RErrPrinter" kindref="compound">RErrPrinter</ref></type>
        <definition>RErrPrinter RcppThread::Rcerr</definition>
        <argsstring></argsstring>
        <name>Rcerr</name>
        <initializer>= <ref refid="classRcppThread_1_1RErrPrinter" kindref="compound">RErrPrinter</ref>()</initializer>
        <briefdescription>
<para>global <computeroutput>RPrinter</computeroutput> instance called &apos;Rcerr&apos; (as in Rcpp). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/n5/dev/r/RcppThread/inst/include/RcppThread/Rcerr.hpp" line="52" column="20" bodyfile="/home/n5/dev/r/RcppThread/inst/include/RcppThread/Rcerr.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceRcppThread_1a314d0d8e34b9799f4dda1b4d5da36ed0" prot="public" static="yes" mutable="no">
        <type><ref refid="classRcppThread_1_1RPrinter" kindref="compound">RPrinter</ref></type>
        <definition>RPrinter RcppThread::Rcout</definition>
        <argsstring></argsstring>
        <name>Rcout</name>
        <initializer>= <ref refid="classRcppThread_1_1RPrinter" kindref="compound">RPrinter</ref>()</initializer>
        <briefdescription>
<para>global <computeroutput>RPrinter</computeroutput> instance called &apos;Rcout&apos; (as in Rcpp). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/n5/dev/r/RcppThread/inst/include/RcppThread/Rcout.hpp" line="52" column="17" bodyfile="/home/n5/dev/r/RcppThread/inst/include/RcppThread/Rcout.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceRcppThread_1ada4c397edb2f1f4150f8dc1ab899d324" prot="public" static="yes" mutable="no">
        <type>std::thread::id</type>
        <definition>std::thread::id RcppThread::mainThreadID</definition>
        <argsstring></argsstring>
        <name>mainThreadID</name>
        <initializer>= std::this_thread::get_id()</initializer>
        <briefdescription>
<para>global variable holding id of main thread. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/n5/dev/r/RcppThread/inst/include/RcppThread/RMonitor.hpp" line="24" column="24" bodyfile="/home/n5/dev/r/RcppThread/inst/include/RcppThread/RMonitor.hpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceRcppThread_1ae462e1889f6dbf0a3f9392613e9cdc76" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void RcppThread::parallelFor</definition>
        <argsstring>(int begin, int end, F f, size_t nThreads=std::thread::hardware_concurrency(), size_t nBatches=0)</argsstring>
        <name>parallelFor</name>
        <param>
          <type>int</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>end</declname>
        </param>
        <param>
          <type>F</type>
          <declname>f</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nThreads</declname>
          <defval>std::thread::hardware_concurrency()</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>nBatches</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>computes an index-based for loop in parallel batches. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>first index of the loop. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>the loop runs in the range <computeroutput>[begin, end)</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a function (the &apos;loop body&apos;). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nThreads</parametername>
</parameternamelist>
<parameterdescription>
<para>limits the number of threads used from the global pool. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nBatches</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of batches to create; the default (0) uses work stealing to distribute tasks.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Consider the following code: <programlisting><codeline><highlight class="normal">std::vector&lt;double&gt;<sp/>x(10);</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>x.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>i;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> The parallel equivalent is <programlisting><codeline><highlight class="normal">parallelFor(0,<sp/>10,<sp/>[&amp;]<sp/>(size_t<sp/>i)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>i;</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
</programlisting> The function dispatches to a global thread pool, so it can safely be nested or called multiple times with almost no overhead.</para>
<para><bold>Caution</bold>: if the iterations are not independent from another, the tasks need to be synchronized manually (e.g., using mutexes). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/n5/dev/r/RcppThread/inst/include/RcppThread/parallelFor.hpp" line="41" column="1" bodyfile="/home/n5/dev/r/RcppThread/inst/include/RcppThread/parallelFor.hpp" bodystart="41" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespaceRcppThread_1aacf602b65d52bf021dabf4628bca6176" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void RcppThread::parallelForEach</definition>
        <argsstring>(I &amp;items, F f, size_t nThreads=std::thread::hardware_concurrency(), size_t nBatches=0)</argsstring>
        <name>parallelForEach</name>
        <param>
          <type>I &amp;</type>
          <declname>items</declname>
        </param>
        <param>
          <type>F</type>
          <declname>f</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nThreads</declname>
          <defval>std::thread::hardware_concurrency()</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>nBatches</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>computes a range-based for loop in parallel batches. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>items</parametername>
</parameternamelist>
<parameterdescription>
<para>an object allowing for <computeroutput>items.size()</computeroutput> and whose elements are accessed by the <computeroutput>[]</computeroutput> operator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a function (the &apos;loop body&apos;). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nThreads</parametername>
</parameternamelist>
<parameterdescription>
<para>limits the number of threads used from the global pool. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nBatches</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of batches to create; the default (0) uses work stealing to distribute tasks.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Consider the following code: <programlisting><codeline><highlight class="normal">std::vector&lt;double&gt;<sp/>x(10,<sp/>1.0);</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(auto&amp;<sp/>xx<sp/>:<sp/>x)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>xx<sp/>*=<sp/>2;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> The parallel equivalent is <programlisting><codeline><highlight class="normal">parallelFor(x,<sp/>[&amp;]<sp/>(double&amp;<sp/>xx)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>xx<sp/>*=<sp/>2;</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
</programlisting> The function dispatches to a global thread pool, so it can safely be nested or called multiple times with almost no overhead.</para>
<para><bold>Caution</bold>: if the iterations are not independent from another, the tasks need to be synchronized manually (e.g., using mutexes). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/n5/dev/r/RcppThread/inst/include/RcppThread/parallelFor.hpp" line="83" column="1" bodyfile="/home/n5/dev/r/RcppThread/inst/include/RcppThread/parallelFor.hpp" bodystart="83" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="namespaceRcppThread_1a566c8269168c051f8418ce62a07eac58" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void RcppThread::push</definition>
        <argsstring>(F &amp;&amp;f, Args &amp;&amp;... args)</argsstring>
        <name>push</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>pushes jobs to the global thread pool. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a function taking an arbitrary number of arguments. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>a comma-seperated list of the other arguments that shall be passed to <computeroutput>f</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The function returns void; if a job returns a result, use <computeroutput>async()</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/n5/dev/r/RcppThread/inst/include/RcppThread/parallelFor.hpp" line="104" column="1" bodyfile="/home/n5/dev/r/RcppThread/inst/include/RcppThread/parallelFor.hpp" bodystart="104" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="namespaceRcppThread_1a3ce0a8f7082376726b749af3c3170927" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto RcppThread::pushReturn</definition>
        <argsstring>(F &amp;&amp;f, Args &amp;&amp;... args) -&gt; std::future&lt; decltype(f(args...))&gt;</argsstring>
        <name>pushReturn</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>pushes jobs returning a value to the global thread pool. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a function taking an arbitrary number of arguments. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>a comma-seperated list of the other arguments that shall be passed to <computeroutput>f</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an <computeroutput>std::shared_future</computeroutput>, where the user can get the result and rethrow exceptions. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/n5/dev/r/RcppThread/inst/include/RcppThread/parallelFor.hpp" line="118" column="1" bodyfile="/home/n5/dev/r/RcppThread/inst/include/RcppThread/parallelFor.hpp" bodystart="118" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="namespaceRcppThread_1a3ed90ea612c5d982ab585c39d147c4d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto RcppThread::async</definition>
        <argsstring>(F &amp;&amp;f, Args &amp;&amp;... args) -&gt; std::future&lt; decltype(f(args...))&gt;</argsstring>
        <name>async</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>pushes jobs returning a value to the global thread pool. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a function taking an arbitrary number of arguments. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>a comma-seperated list of the other arguments that shall be passed to <computeroutput>f</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an <computeroutput>std::shared_future</computeroutput>, where the user can get the result and rethrow exceptions. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/n5/dev/r/RcppThread/inst/include/RcppThread/parallelFor.hpp" line="132" column="1" bodyfile="/home/n5/dev/r/RcppThread/inst/include/RcppThread/parallelFor.hpp" bodystart="132" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="namespaceRcppThread_1ad2a2fc0e5880f137964f12a45a4ce140" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void RcppThread::wait</definition>
        <argsstring>()</argsstring>
        <name>wait</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>waits for all jobs to finish and checks for interruptions, but only from the main thread. Does nothing when called from other threads. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/n5/dev/r/RcppThread/inst/include/RcppThread/parallelFor.hpp" line="140" column="1" bodyfile="/home/n5/dev/r/RcppThread/inst/include/RcppThread/parallelFor.hpp" bodystart="140" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="namespaceRcppThread_1ae48d2e823f3ac43fb87a2795f242e3df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void RcppThread::checkUserInterrupt</definition>
        <argsstring>(bool condition=true)</argsstring>
        <name>checkUserInterrupt</name>
        <param>
          <type>bool</type>
          <declname>condition</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>checks for user interruptions, but only if called from main thread. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>optional; a condition for the check to be executed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Declared as a friend in <computeroutput>RMonitor</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/n5/dev/r/RcppThread/inst/include/RcppThread/RMonitor.hpp" line="148" column="13" bodyfile="/home/n5/dev/r/RcppThread/inst/include/RcppThread/RMonitor.hpp" bodystart="148" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="namespaceRcppThread_1a2953566b926010e05a2d10586c72267c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool RcppThread::isInterrupted</definition>
        <argsstring>(bool condition=true)</argsstring>
        <name>isInterrupted</name>
        <param>
          <type>bool</type>
          <declname>condition</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>checks for user interruptions, but only if called from main thread (otherwise returns <computeroutput>false</computeroutput>). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>optional; a condition for the check to be executed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Declared as a friend in <computeroutput>RMonitor</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/n5/dev/r/RcppThread/inst/include/RcppThread/RMonitor.hpp" line="158" column="13" bodyfile="/home/n5/dev/r/RcppThread/inst/include/RcppThread/RMonitor.hpp" bodystart="158" bodyend="163"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><computeroutput>RcppThread</computeroutput> functionality </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/n5/dev/r/RcppThread/inst/include/RcppThread/parallelFor.hpp" line="12" column="1"/>
  </compounddef>
</doxygen>
